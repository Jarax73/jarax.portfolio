"use client";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ChevronLeft, ChevronRight } from "lucide-react";
import styles from "../about.module.css";
import Link from "next/link";

const link = (
  <Link href={"https://kadea.academy"} className={styles.link}>
    Kadea Academy
  </Link>
);

const cards = [
  {
    description: `ðŸš€ Ma passion pour le dÃ©veloppement informatique mâ€™a toujours poussÃ© Ã  apprendre et Ã  Ã©voluer. Câ€™est en rejoignant la `,
    description1:
      "que jâ€™ai acquis les bases du dÃ©veloppement web et mobile Ã  travers des projets concrets et engageants.",
    description2:
      "ðŸ’¡ Plus quâ€™une simple formation, cette expÃ©rience mâ€™a appris une leÃ§on essentielle : ne pas me limiter Ã  une technologie, mais comprendre la logique qui se cache derriÃ¨re. ",
    description3:
      "Aujourdâ€™hui, je peux mâ€™adapter rapidement Ã  nâ€™importe quel outil.",
    description4:
      "ðŸŽ¸ En dehors du code, je suis passionnÃ© par la musique, la guitare et le football. Et quand je ne suis pas devant mon Ã©cran, je plonge dans les derniÃ¨res tendances tech et scientifiques. Toujours en quÃªte de nouveautÃ© et dâ€™innovation !",
  },
  {
    title: "Carte 2",
    description:
      "ðŸ’¡ Un dÃ©veloppeur grandit grÃ¢ce aux projets. Chaque ligne de code, chaque dÃ©fi technique est une opportunitÃ© dâ€™apprentissage.",
    description1:
      "En tant que dÃ©veloppeur, je ne veux pas me contenter dâ€™attendre les opportunitÃ©s : je veux les crÃ©er.",
    description2:
      "PassionnÃ© par le dÃ©veloppement, je mâ€™efforce de toujours travailler sur de nouveaux projets, que ce soit en reproduisant des maquettes inspirantes ou en explorant des idÃ©es innovantes.",
    description3:
      "ðŸ”¥ Mon objectif ? Ã‰voluer constamment, affiner mes compÃ©tences et rester en mouvement pour cultiver ma passion du code.",
  },
];

export default function CardCarousel() {
  const [index, setIndex] = useState(0);

  const nextCard = () => setIndex((prev) => (prev + 1) % cards.length);
  const prevCard = () =>
    setIndex((prev) => (prev - 1 + cards.length) % cards.length);

  return (
    <div className={styles.description_container}>
      <div className={styles.description}>
        <p className={styles.text}>
          {cards[index].description} {link} {cards[index].description1}
        </p>
        <p className={styles.text}>{cards[index].description2}</p>
        <p className={styles.text}>{cards[index].description3}</p>
        {/* <p className={styles.text}>{cards[index].description4}</p> */}
      </div>
      {/* <AnimatePresence mode="wait">
        <motion.div
          key={index}
          className={styles.description}
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -100 }}
          transition={{ duration: 0.5 }}
        >
          <p className={styles.text}>
            {cards[index].description} {link} {cards[index].description1}
          </p>
          <p className={styles.text}>{cards[index].description2}</p>
          <p className={styles.text}>{cards[index].description3}</p>
          <p className={styles.text}>{cards[index].description4}</p>
        </motion.div>
      </AnimatePresence> */}

      {/* <div className={styles.chevrons_container}>
        <button className={styles.chevrons} onClick={prevCard}>
          <ChevronLeft size={30} />
        </button>
        <button className={styles.chevrons} onClick={nextCard}>
          <ChevronRight size={30} />
        </button>
      </div> */}
    </div>
  );
}
